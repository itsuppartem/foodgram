# Generated by Django 3.2.20 on 2025-05-21 12:38

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChefAdvice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tips', models.JSONField(blank=True, help_text='List of cooking tips', null=True, verbose_name='Cooking tips')),
                ('variations', models.JSONField(blank=True, help_text='List of recipe variations', null=True, verbose_name='Recipe variations')),
                ('common_mistakes', models.JSONField(blank=True, help_text='List of common mistakes', null=True, verbose_name='Common mistakes')),
                ('serving_suggestions', models.JSONField(blank=True, help_text='List of serving suggestions', null=True, verbose_name='Serving suggestions')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='DrinkPairing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the drink', max_length=200, verbose_name='Drink name')),
                ('type', models.CharField(help_text='Type of the drink', max_length=100, verbose_name='Drink type')),
                ('description', models.TextField(help_text='Description of the drink', verbose_name='Drink description')),
                ('pairing_reason', models.TextField(help_text='Reason for pairing with the recipe', verbose_name='Pairing reason')),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when_added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Favourited',
                'verbose_name_plural': 'Favourited',
                'ordering': ['-when_added'],
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Input ingredients name', max_length=250, verbose_name='Ingredient')),
                ('measurement_unit', models.CharField(help_text='Input measurement units', max_length=50, verbose_name='Measurement units')),
            ],
            options={
                'verbose_name': 'Ingredient',
                'verbose_name_plural': 'Ingredients',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='IngredientInRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Amount value of ingredient')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients_amount', to='foodgram.ingredient', verbose_name='Ingredient in recipe')),
            ],
            options={
                'verbose_name': 'Ingredients amount in recipe',
                'verbose_name_plural': 'Ingredients amount in recipe',
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Input recipes name', max_length=200, verbose_name='Name')),
                ('text', models.TextField(blank=True, default='', help_text='How this thing should be cooked', verbose_name='Description')),
                ('cooking_time', models.PositiveSmallIntegerField(blank=True, help_text='Input cooking time in minutes', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Cooking time')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('image', models.ImageField(blank=True, help_text='Upload image', upload_to='recipes/media/', verbose_name='Image')),
                ('views_count', models.PositiveIntegerField(blank=True, default=0, help_text='Number of recipe views', null=True, verbose_name='Views count')),
                ('favorites_count', models.PositiveIntegerField(blank=True, default=0, help_text='Number of times recipe was favorited', null=True, verbose_name='Favorites count')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', help_text='Recipe difficulty level', max_length=20, verbose_name='Difficulty')),
                ('image_generation_prompt', models.TextField(blank=True, help_text='Prompt for generating recipe image', null=True, verbose_name='Image generation prompt')),
                ('steps', models.JSONField(blank=True, help_text='List of cooking steps', null=True, verbose_name='Cooking steps')),
                ('author', models.ForeignKey(help_text='This is the author of the recipe', on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('ingredients', models.ManyToManyField(blank=True, help_text='Choose ingredients for your recipe', related_name='recipes', through='foodgram.IngredientInRecipe', to='foodgram.Ingredient', verbose_name='Ingredients')),
            ],
            options={
                'verbose_name': 'Recipe',
                'verbose_name_plural': 'Recipes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Tags name', max_length=250, verbose_name='Tag')),
                ('color', models.CharField(default='#ffffff', help_text='Tags colour', max_length=7, verbose_name='HEX colour')),
                ('slug', models.SlugField(help_text='Tags slug', unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TagsInRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='foodgram.recipe')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='foodgram.tag', verbose_name='Ð¢ag in recipe')),
            ],
            options={
                'verbose_name': 'Tags in recipe',
                'verbose_name_plural': 'Tags in recipe',
            },
        ),
        migrations.CreateModel(
            name='ShoppingCart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when_added', models.DateTimeField(auto_now_add=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='is_in_shopping_cart', to='foodgram.recipe', verbose_name='Recipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='is_in_shopping_cart', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Buying List',
                'verbose_name_plural': 'Buying List',
            },
        ),
        migrations.CreateModel(
            name='RecipeHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_text', models.TextField(help_text='History of the recipe', verbose_name='History text')),
                ('interesting_facts', models.JSONField(blank=True, help_text='List of interesting facts', null=True, verbose_name='Interesting facts')),
                ('cultural_significance', models.TextField(blank=True, help_text='Cultural significance of the recipe', null=True, verbose_name='Cultural significance')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='foodgram.recipe')),
            ],
        ),
        migrations.AddField(
            model_name='recipe',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='Choose recipes tags', related_name='recipes', through='foodgram.TagsInRecipe', to='foodgram.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='ingredientinrecipe',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients_amount', to='foodgram.recipe', verbose_name='Recipe'),
        ),
        migrations.AddConstraint(
            model_name='ingredient',
            constraint=models.UniqueConstraint(fields=('name', 'measurement_unit'), name='unique_ingredient'),
        ),
        migrations.AddField(
            model_name='favorite',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite', to='foodgram.recipe', verbose_name='Recipe'),
        ),
        migrations.AddField(
            model_name='favorite',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='drinkpairing',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drink_pairings', to='foodgram.recipe'),
        ),
        migrations.AddField(
            model_name='comment',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='foodgram.recipe'),
        ),
        migrations.AddField(
            model_name='chefadvice',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chef_advice', to='foodgram.recipe'),
        ),
        migrations.AddConstraint(
            model_name='shoppingcart',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='unique_cart'),
        ),
        migrations.AddConstraint(
            model_name='ingredientinrecipe',
            constraint=models.UniqueConstraint(fields=('ingredient', 'recipe'), name='unique_amount'),
        ),
        migrations.AddConstraint(
            model_name='favorite',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='unique_favorite'),
        ),
        migrations.AddConstraint(
            model_name='comment',
            constraint=models.UniqueConstraint(fields=('recipe', 'author'), name='unique_comment'),
        ),
    ]
